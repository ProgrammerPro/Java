import java.util.*;
public class Telephone {
	public static void main (String [] args){
		char [] ch = new char [20];
		Scanner input = new Scanner (System.in);
		System.out.println("Please enter a telephone number: ");
		String S1 = input.nextLine();
		for (int i = 0; i < S1.length(); i++){
			ch[i] = S1.charAt(i);
		}
		String number = new String();
		int num = 0;
		if (valid_phone(ch)){
			if (Phone_format1(ch)[0] == '1'){
				number = Phone_format1(ch)[1] + "" + Phone_format1(ch)[2] + "" + Phone_format1(ch)[3];
				num = Integer.parseInt(number);
				System.out.println("Location: " + state(num));
		}
		else if (Phone_format1(ch)[0] != '1'){
				number = Phone_format1(ch)[0] + "" + Phone_format1(ch)[1] + "" + Phone_format1(ch)[2];
				num = Integer.parseInt(number);
				System.out.println("Location: " + state(num));
		}
	
		}
		else
			System.out.println("invalid phone number");
	}
	public static boolean valid_phone(char [] str){
		int number = 0;
		int character = 0;
		for (int i = 0; i < str.length; i++){
			if (Character.isDigit(str[i])){
				number++;
			}
			else if ((str[i] == '(') || (str[i] == '-') || (str[i] == '_') || (str[i] == ' ') || (str[i] == ')') || (str[i] == '.')){
				character++;
			}
		}
		if ((character <= 4) && (number >= 10) && (number <= 11)){
			return true;
		}
		else
			return false;
		}	
	public static char [] Phone_format1 (char [] array){ // format 1: no spaces between digits.
		char [] results = new char[array.length];
		if (Character.isDigit(array[0]) && Character.isDigit(array[1]) && Character.isDigit(array[2])){
			results[0] = array[0];
			results[1] = array[1];
			results[2] = array[2];
			for (int S = 3, N = 3; S < array.length; S++){
				if (Character.isDigit(array[S])){
					results[N] = array[S];
					N++;
				}
				else if ((array[S] == '-') || (array[S]) == '_' || (array[S] == ' ') || (array[S] == '.') && (Character.isDigit(array[S+1]))){
					results[N] = array[S+1];
					N++;
				}
			}
		}
		else if (Character.isDigit(array[0]) && ((array[1] == '-') || (array[1] == '_') || (array[1] == ' ') || (array[1] == '(') || (array[1] == '.')) && Character.isDigit(array[2])){
			results[0] = array[0];
			results[1] = array[2];
				for (int p = 3, L = 2; p < array.length; p++){
					if (Character.isDigit(array[p])){
						results[L] = array[p];
						L++;
					}
					else if ((array[p] == '-') || (array[p]) == '_' || (array[p] == ' ') || (array[p] == '.') && Character.isDigit(array[p+1])){
						results[L] = array[p+1];
						L++;
					}
				}
			}
		else if ((array[0] == '(') && (array[4] == ')')){
			if (Character.isDigit(array[1]) && Character.isDigit(array[2]) && Character.isDigit(array[3])){
				if (array[4] == ')' && ((array[5] == '_') ||(array[5] == ' ') || (array[5] == '.') || (array[5] == '-')) && Character.isDigit(array[6])){
					results[0] = array[1];
					results[1] = array[2];
					results[2] = array[3];
				for (int q = 4, k = 3; q < array.length; q++){
					if (Character.isDigit(array[q])){
						results[k] = array[q];
						k++;
						}
					}
				}
			}
		}
		return results;
	}
	public static String state (int LocalArea){
		String location = " ";
		int StateNum = 0;
		int [][] area = {
				{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50, 51, 52, 53, 54, 55}, // state number
				{205, 907, 684, 480, 479, 209, 303, 203, 302, 239, 229, 671, 808, 208, 217, 219, 319, 316, 270, 225, 207, 240, 339, 231, 218, 228, 314, 406, 308, 702, 603, 201, 505, 212, 252, 701, 216, 405, 458, 215, 787, 401, 803, 605, 423, 210, 385, 802, 340, 276, 206, 202, 304, 262, 307},
				{251, 0, 0, 520, 501, 213, 719, 475, 0, 305, 404, 0, 0, 0, 224, 260, 515, 620, 502, 318, 0, 301, 351, 248, 320, 601, 417, 0, 402, 775, 0, 551, 575, 315, 336, 0, 234, 539, 503, 267, 939, 0, 843, 0, 615, 214, 435, 0, 0, 434, 253, 0, 681, 414, 0},
				{256, 0, 0, 602, 870, 310, 720, 860, 0, 321, 470, 0, 0, 0, 309, 317, 563, 785, 606, 337, 0, 410, 413, 269, 507, 662, 573, 0, 0, 0, 0, 609, 0, 347, 704, 0, 330, 580, 541, 412, 0, 0, 864, 0, 731, 254, 979, 801, 0, 0, 540, 360, 0, 0, 608, 0},
				{334, 0, 0, 623, 0, 323, 970, 0, 0, 352, 478, 0, 0, 0, 312, 574, 641, 913, 859, 504, 0, 443, 508, 313, 612, 769, 636, 0, 0, 0, 0, 732, 0, 516, 828, 0, 419, 918, 971, 484, 0, 0, 0, 0, 865, 281, 0, 0, 0, 571, 425, 0, 0, 715, 0},
				{938, 0, 0, 928, 0, 408, 0, 0, 0, 386, 678, 0, 0, 0, 331, 765, 712, 0, 0, 985, 0, 0, 617, 517, 651, 0, 660, 0, 0, 0, 0, 848, 0, 518, 910, 0, 440, 0, 0, 570, 0, 0, 0, 0, 901, 325, 0, 0, 0, 703, 509, 0, 0, 920, 0},
				{0, 0, 0, 0, 0, 415, 0, 0, 0, 407, 706, 0, 0, 0, 618, 812, 0, 0, 0, 0, 0, 0, 774, 586, 763, 0, 816, 0, 0, 0, 0, 856, 0, 585, 919, 0, 513, 0, 0, 610, 0, 0, 0, 0, 931, 361, 0, 0, 0, 757, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 424, 0, 0, 0, 561, 762, 0, 0, 0, 630, 0, 0, 0, 0, 0, 0, 0, 781, 616, 952, 0, 0, 0, 0, 0, 0, 862, 0, 607, 980, 0, 567, 0, 0, 717, 0, 0, 0, 0, 0, 409, 0, 0, 0, 0, 804, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 442, 0, 0, 0, 727, 770, 0, 0, 0, 708, 0, 0, 0, 0, 0, 0, 0, 857, 734, 0, 0, 0, 0, 0, 0, 0, 908, 0, 631, 0, 0, 614, 0, 0, 724, 0, 0, 0, 0, 0, 430, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 510, 0, 0, 0, 754, 912, 0, 0, 0, 773, 0, 0, 0, 0, 0, 0, 0, 987, 810, 0, 0, 0, 0, 0, 0, 0, 973, 0, 646, 0, 0, 740, 0, 0, 814, 0, 0, 0, 0, 0, 432, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 530, 0, 0, 0, 772, 0, 0, 0, 0, 779, 0, 0, 0, 0, 0, 0, 0, 0, 906, 0, 0, 0, 0, 0, 0, 0, 0, 0, 716, 0, 0, 937, 0, 0, 878, 0, 0, 0, 0, 0, 469, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 559, 0, 0, 0, 786, 0, 0, 0, 0, 815, 0, 0, 0, 0, 0, 0, 0, 0, 947, 0, 0, 0, 0, 0, 0, 0, 0, 0, 718, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 562, 0, 0, 0, 813, 0, 0, 0, 0, 847, 0, 0, 0, 0, 0, 0, 0, 0, 989, 0, 0, 0, 0, 0, 0, 0, 0, 0, 845, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 682, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 619, 0, 0, 0, 850, 0, 0, 0, 0, 872, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 914, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 713, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 626, 0, 0, 0, 863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 917, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 806, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 650, 0, 0, 0, 904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 817, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 657, 0, 0, 0, 941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 830, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 661, 0, 0, 0, 954, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 832, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 903, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 915, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 747, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 936, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 940, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 956, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 818, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 972, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 831, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 979, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 858, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 909, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 925, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 949, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		};
		for (int i = 0; i < area.length; i++){
			for (int j = 0; j < area[i].length; j++){
				if (area[i][j] == LocalArea){
					StateNum = area[0][j];
				}
			}
		}
		
		switch(StateNum){
			case 1: location = "Alabama";
			break;
			case 2: location = "Alaska";
			break;
			case 3: location = "American Samoa";
			break;
			case 4: location = "Arizona";
			break;
			case 5: location = "Arkansas";
			break;
			case 6: location = "California";
			break;
			case 7: location = "Colorado";
			break;
			case 8: location = "Connecticut";
			break;
			case 9: location = "Delaware";
			break;
			case 10: location = "Florida";
			break;
			case 11: location = "Georgia";
			break;
			case 12: location = "Guam";
			break;
			case 13: location = "Hawaii";
			break;
			case 14: location = "Idaho";
			break;
			case 15: location = "Illinois";
			break;
			case 16: location = "Indiana"; 
			break;
			case 17: location = "Iowa";
			break;
			case 18: location = "Kansas";
			break;
			case 19: location = "Kentucky";
			break;
			case 20: location = "Louisiana";
			break;
			case 21: location = "Maine";
			break;
			case 22: location = "Maryland";
			break;
			case 23: location = "Massachusetts";
			break;
			case 24: location = "Michigan";
			break;
			case 25: location = "Minnesota";
			break;
			case 26: location = "Mississippi";
			break;
			case 27: location = "Missouri"; 
			break;
			case 28: location = "Montana";
			break;
			case 29: location = "Nebraska";
			break;
			case 30: location = "Nevada";
			break;
			case 31: location = "New Hampshire";
			break;
			case 32: location = "New Jersey";
			break;
			case 33: location = "New Mexico";
			break;
			case 34: location = "New York";
			break;
			case 35: location = "North Carolina";
			break;
			case 36: location = "North Dakota";
			break;
			case 37: location = "Ohio";
			break;
			case 38: location = "Oklahoma";
			break;
			case 39: location = "Oregon";
			break;
			case 40: location = "Pennsylvania";
			break;
			case 41: location = "Puerto Rico";
			break;
			case 42: location = "Rhode Island";
			break;
			case 43: location = "South Carolina";
			break;
			case 44: location = "South Dakota";
			break;
			case 45: location = "Tennessee";
			break;
			case 46: location = "Texas";
			break;
			case 47: location = "Utah";
			break;
			case 48: location = "Vermont";
			break;
			case 49: location = "Virgin Islands";
			break;
			case 50: location = "Virginia";
			break;
			case 51: location = "Washington";
			break;
			case 52: location = "Washington D.C.";
			break;
			case 53: location = "West Virginia";
			break;
			case 54: location = "Wisconsin";
			break;
			case 55: location = "Wyoming";
			break;
			default: location = "Invalid Area code!";
		}
			
		return location;
	}
}

//make a function that we validate a phone number and if its valid, format it to be numbers without dashes or different format(s) 
//make a function that will take a phone number and if it was 1-800 elnouri it will convert it to numbers.
//make an exception if the user enters a string instead of a number or any +  or - sings etc.. 
